{

	proc float Add(float $nums[]){
		$total = 0;
		for($n in $nums){
			$total += $n;
		}
		return $total;
	}
	
	proc float Subtract(float $nums[]){
		$total = $nums[0];
		for($i = 1; $i < size($nums); $i++){
			$total -= $nums[$i];
		}
		return $total;
	}
	
	proc float Multiply(float $nums[]){
		$total = 1;
		for($n in $nums){
			$total *= $n;
		}
		return $total;
	}
	
	proc float Divide(float $nums[]){
		$total = $nums[0];
		for($i = 1; $i < size($nums); $i++){
			$total /= $nums[$i];
		}
		return $total;
	}
	
	proc float Mean(float $nums[]){
		return (Add($nums)/size($nums));
	}
	
	proc float Median(float $nums[]){
		$nums = `sort $nums`;
		if(size($nums)%2 == 0){
			int $medianIndex1 = size($nums)/2;
			int $medianIndex2 = $medianIndex1 - 1;
			return (($nums[$medianIndex1] + $nums[$medianIndex2])/2);
		}
		else{
			return ($nums[(size($nums)/2)]);
		}
	}
	
	proc float[] Mode(float $nums[]){
		$nums = `sort $nums`;
		float $modes[];
		int $maxNum = 0;
		int $currTotal = 0;
		float $currNum = $nums[0];
		for($i = 0; $i < size($nums); $i++){
			if($nums[$i] == $currNum){
				$currTotal += 1;
			}
			else{
				if($currTotal > $maxNum){
					$maxNum = $currTotal;
					//float $modes[];
					$modes = floatArrayRemove($modes, $modes);
					$modes[size($modes)] = $currNum;
				}
				else if($currTotal == $maxNum){
					$modes[size($modes)] = $currNum;
				}
				$currNum = $nums[$i];
				$currTotal = 1;
			}
		}
		return $modes;
	}
	proc float PowerRec(float $x, float $n){
		if($n == 0){
			return 1;
		}
		else{
			return $x * PowerRec($x, $n-1);
		}
	}
	
	proc float Power(float $nums[]){
		if(size($nums) != 2){
			error("Power function can only have two values (base, exponent)");
		}
		return PowerRec($nums[0], $nums[1]);
	}
	
	proc float FactorialRec(float $n){
	    if($n == 1){
	        return 1;
	    }
	    else{
	        return $n * FactorialRec($n-1);
	    }
    }
    
    proc float Factorial (float $nums[]){
        if(size($nums) != 1){
            error("factorials can only contain 1 number");
        }  
        return FactorialRec($nums[0]);
    }
	
	proc float[] Calculator(float $nums[], string $function ){
		float $numbers[];
		string $funct = `tolower $function`;
		switch($funct){
			case "+":
			case "add":
				$numbers[0] = Add($nums);
				break;
			case "-":
			case "subtract":
				$numbers[0] = Subtract($nums);
				break;
			case "x":
			case "*":
			case "multiply":
				$numbers[0] = Multiply($nums);
				break;
			case "/":
			case "divide":
				$numbers[0] = Divide($nums);
				break;
			case "mean":
				$numbers[0] = Mean($nums);
				break;
			case "median":
				$numbers[0] = Median($nums);
				break;
			case "mode":
				$numbers = Mode($nums);
				break;
			case "^":
			case "power":
				$numbers[0] = Power($nums);
				break;
			case "!":
			case "factorial":
			    $numbers[0] = Factorial($nums);
			    break;
			default:
				error("must enter a valid operation");
				break;
		}
		return $numbers;
		
	}
	
	float $numbers[] = {5};
	print(Calculator($numbers, "!"));

}