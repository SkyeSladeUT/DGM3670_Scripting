{

	proc float Add(float $nums[]){
		$total = 0;
		if(size($nums)== 2 && $nums[0] == 2 && $nums[1] == 2){
			print("2 + 2 is always 2\n");
			return 2;
		}
		for($n in $nums){
			$total += $n;
		}
		return $total;
	}
	
	proc float Subtract(float $nums[]){
		$total = $nums[0];
		for($i = 1; $i < size($nums); $i++){
			$total -= $nums[$i];
		}
		return $total;
	}
	
	proc float Multiply(float $nums[]){
		$total = 1;
		for($n in $nums){
			$total *= $n;
		}
		return $total;
	}
	
	proc float Divide(float $nums[]){
		$total = $nums[0];
		for($i = 1; $i < size($nums); $i++){
			$total /= $nums[$i];
		}
		return $total;
	}
	
	proc float Mean(float $nums[]){
		return (Add($nums)/size($nums));
	}
	
	proc float Median(float $nums[]){
		$nums = `sort $nums`;
		if(size($nums)%2 == 0){
			int $medianIndex1 = size($nums)/2;
			int $medianIndex2 = $medianIndex1 - 1;
			return (($nums[$medianIndex1] + $nums[$medianIndex2])/2);
		}
		else{
			return ($nums[(size($nums)/2)]);
		}
	}
	
	proc float[] Mode(float $nums[]){
		$nums = `sort $nums`;
		float $modes[];
		int $maxNum = 0;
		int $currTotal = 0;
		float $currNum = $nums[0];
		for($i = 0; $i < size($nums); $i++){
			if($nums[$i] == $currNum){
				$currTotal += 1;
			}
			else{
				if($currTotal > $maxNum){
					$maxNum = $currTotal;
					$modes = floatArrayRemove($modes, $modes);
					$modes[size($modes)] = $currNum;
				}
				else if($currTotal == $maxNum){
					$modes[size($modes)] = $currNum;
				}
				$currNum = $nums[$i];
				$currTotal = 1;
			}
		}
        if($currTotal > $maxNum){
		    $maxNum = $currTotal;
			$modes = floatArrayRemove($modes, $modes);
			$modes[size($modes)] = $currNum;
		}
		else if($currTotal == $maxNum){
			$modes[size($modes)] = $currNum;
		}
		return $modes;
	}
	
	proc float PowerRec(float $x, float $n){
		if($n == 0){
			return 1;
		}
		else{
			return $x * PowerRec($x, $n-1);
		}
	}
	
	proc float Power(float $nums[]){
		if(size($nums) != 2){
			error("Power function can only have two values (base, exponent)");
		}
		return PowerRec($nums[0], $nums[1]);
	}
	
	proc float FactorialRec(float $n){
	    if($n == 1){
	        return 1;
	    }
	    else{
	        return $n * FactorialRec($n-1);
	    }
    }
    
    proc float Factorial (float $nums[]){
        if(size($nums) != 1){
            error("factorials can only contain 1 number");
        }  
        return FactorialRec($nums[0]);
    }
	
	proc float[] Calculator(float $nums[], string $function ){
		float $numbers[];
		string $output = "";
		string $funct = `tolower $function`;
		if(!size($nums))
			error("must enter numbers");
		switch($funct){
			case "+":
			case "add":
				$output += $nums[0];
				for($i = 1; $i < size($nums); $i++){
					$output += " + " + $nums[$i];
				}
				$numbers[0] = Add($nums);
				$output += " = " + $numbers[0];
				break;
			case "-":
			case "subtract":
				$output += $nums[0];
				for($i = 1; $i < size($nums); $i++){
					$output += " - " + $nums[$i];
				}
				$numbers[0] = Subtract($nums);
				$output += " = " + $numbers[0];
				break;
			case "x":
			case "*":
			case "multiply":
				$output += $nums[0];
				for($i = 1; $i < size($nums); $i++){
					$output += " * " + $nums[$i];
				}
				$numbers[0] = Multiply($nums);
				$output += " = " + $numbers[0];
				break;
			case "/":
			case "divide":
				$output += $nums[0];
				for($i = 1; $i < size($nums); $i++){
					$output += " / " + $nums[$i];
				}
				$numbers[0] = Divide($nums);
				$output += " = " + $numbers[0];
				break;
			case "mean":
				$output += "The mean of {" + $nums[0];
				for($i = 1; $i < size($nums); $i++){
					$output += ", " + $nums[$i];
				}
				$numbers[0] = Mean($nums);
				$output += "} is " + $numbers[0];
				break;
			case "median":
				$output += "The median of {" + $nums[0];
				for($i = 1; $i < size($nums); $i++){
					$output += ", " + $nums[$i];
				}
				$numbers[0] = Median($nums);
				$output += "} is " + $numbers[0];
				break;
			case "mode":
				$output += "The mode of {" + $nums[0];
				for($i = 1; $i < size($nums); $i++){
					$output += ", " + $nums[$i];
				}
				$numbers = Mode($nums);
				$output += "} is/are " + $numbers[0];
				for($i = 1; $i <size($numbers); $i++){
					$output += ", " + $numbers[$i];
				}
				break;
			case "^":
			case "power":
				$numbers[0] = Power($nums);
				$output = $nums[0] + "^" + $nums[1] + " = " + $numbers[0];
				break;
			case "!":
			case "factorial":
			    $numbers[0] = Factorial($nums);
				$output = $nums[0] + "!" + " = " + $numbers[0];
			    break;
			default:
				error("must enter a valid operation");
				break;
		}
		print($output);
		return $numbers;
		
	}
	float $numbers[] = {2, 1, 2, 4, 2, 5, 4, 4, 4, 6, 6, 8};
	Calculator($numbers, "+");

}