{
    vector $minT = << -10, -10, -10 >>, $maxT = << 10, 10, 10 >>, $minR = << 0, 0, 0 >>, $maxR = << 90, 90, 90 >>, $minS = << .1, .1, .1 >>, $maxS = << 2, 2, 2 >>;
    int $DuplicateNumber = 10;
    
	proc string[] RandomPlacement(int $numDuplicates, vector $TransMin, vector $TransMax, vector $RotMin, vector $RotMax, vector $ScaleMin, vector $ScaleMax){
		string $obj[] = `ls -sl -o`;
		if(!size($obj)){
			error ("Must select an object\n");
		}
		string $groupName = `group -em`;
		$groupName = `rename $groupName Duplicated_Objects`;
		string $dupObj[];
		string $duplicatedObjs[];
		int $i;
		vector $RandTrans = << 0, 0, 0>>;
		vector $RandRot = << 0, 0, 0>>;
		vector $RandScale = << 1, 1, 1>>;
		for($i = 0; $i < $numDuplicates; $i++){
		    $dupObj = `duplicate $obj`;
		    for($o in $dupObj){
		        $duplicatedObjs[size($duplicatedObjs)] = $o;
		        $RandTrans = `rand $minT $maxT`;
			    $RandRot = `rand $minR $maxR`;
			    $RandScale = `rand $minS $maxS`;
		        $duplicateObjs[$i] = $dupObj[0];
		        move -ws ($RandTrans.x) ($RandTrans.y) ($RandTrans.z) $o;
		        rotate -os ($RandRot.x) ($RandRot.y) ($RandRot.z) $o;
		        scale -cp ($RandScale.x) ($RandScale.y) ($RandScale.z) $o;
		        parent $o $groupName;
		    }
		}
		return $duplicatedObjs;
	}
	
	RandomPlacement($DuplicateNumber, $minT, $maxT, $minR, $maxR, $minS, $maxS);
	
	
}

